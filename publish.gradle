/*
 * Copyright 2018 ICON Foundation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

def snapshotSuffix = rootProject.hasProperty('release') ? '' : '-SNAPSHOT'
version = VERSION_NAME + snapshotSuffix

def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    developers {
        developer {
            id "iconfoundation"
            name "icon.foundation"
            email "foo@icon.foundation"
        }
    }
    scm {
        url POM_SCM_URL
    }
}

project(':library') {
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier 'javadoc'
        from javadoc.destinationDir
    }

    publishing {
        repositories {
            maven {
                name = 'mavenCentral'
                def releasesUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
                def snapshotsUrl = "https://oss.sonatype.org/content/repositories/snapshots"
                url = version.endsWith('SNAPSHOT') ? snapshotsUrl : releasesUrl
                credentials {
                    username = rootProject.hasProperty('mavenCentralUsername') ? "$mavenCentralUsername" : ''
                    password = rootProject.hasProperty('mavenCentralPassword') ? "$mavenCentralPassword" : ''
                }
            }
        }
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar
                groupId GROUP
                artifactId POM_ARTIFACT_ID
                pom.withXml {
                    def root = asNode()
                    root.appendNode('name', POM_ARTIFACT_ID)
                    root.appendNode('description', POM_DESCRIPTION)
                    root.appendNode('url', POM_URL)
                    root.children().last() + pomConfig

                    // Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                    configurations.compile.allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }

    signing {
        required rootProject.hasProperty('release')
        if (rootProject.hasProperty('signingKey')) {
            def signingKey = rootProject.findProperty("signingKey")
            def signingPassword = rootProject.findProperty("signingPassword")
            useInMemoryPgpKeys(signingKey, signingPassword)
        }
        sign publishing.publications.mavenJava
    }
}
